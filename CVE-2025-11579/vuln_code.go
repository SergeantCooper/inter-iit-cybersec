package main

import (
	"fmt"
	"io"
	"os"
	"path/filepath"

	"github.com/nwaples/rardecode/v2"
)

func extractRAR(rarPath, destDir string) error {

	file, err := os.Open(rarPath)
	if err != nil {
		return fmt.Errorf("failed to open RAR file: %w", err)
	}
	defer file.Close()

	rarReader, err := rardecode.NewReader(file)
	if err != nil {
		return fmt.Errorf("failed to create RAR reader: %w", err)
	}

	if err := os.MkdirAll(destDir, 0755); err != nil {
		return fmt.Errorf("failed to create destination directory: %w", err)
	}

	for {
		header, err := rarReader.Next()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("failed to read next header: %w", err)
		}

		outputPath := filepath.Join(destDir, header.Name)

		if header.IsDir {
			if err := os.MkdirAll(outputPath, 0755); err != nil {
				return fmt.Errorf("failed to create directory %s: %w", outputPath, err)
			}
			fmt.Printf("Created directory: %s\n", outputPath)
			continue
		}

		if err := os.MkdirAll(filepath.Dir(outputPath), 0755); err != nil {
			return fmt.Errorf("failed to create parent directory for %s: %w", outputPath, err)
		}

		outFile, err := os.Create(outputPath)
		if err != nil {
			return fmt.Errorf("failed to create file %s: %w", outputPath, err)
		}

		_, err = io.Copy(outFile, rarReader)
		outFile.Close()
		if err != nil {
			return fmt.Errorf("failed to extract file %s: %w", outputPath, err)
		}

		fmt.Printf("Extracted: %s (%d bytes)\n", outputPath, header.UnPackedSize)
	}

	return nil
}

func main() {

	if len(os.Args) < 3 {
		fmt.Println("Usage: go run main.go <archive_file> <destination_directory>")
		return
	}

	archiveFile := os.Args[1]
	extractDir := os.Args[2]

	fmt.Println("Extracting RAR archive...")
	err := extractRAR(archiveFile, extractDir)
	if err != nil {
		fmt.Printf("Error: %v\n", err)
	} else {
		fmt.Println("Extraction completed successfully!")
	}
}
